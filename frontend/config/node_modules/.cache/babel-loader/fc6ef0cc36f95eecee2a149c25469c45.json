{"ast":null,"code":"var _jsxFileName = \"/Users/ac/Desktop/ui/src/components/Skeleton/Skeleton.js\";\nimport * as THREE from \"three\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useThree } from \"react-three-fiber\";\nimport { useDrag } from \"react-use-gesture\";\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\nexport default function Skeleton(props) {\n  const group = useRef();\n  const {\n    nodes,\n    materials,\n    animations\n  } = useGLTF(\"../../../Xbot.glb\");\n  const {\n    actions\n  } = useAnimations(animations, group);\n  const [head, setHead] = useState(false);\n  const [leftLowerArm, setLeftLowerArm] = useState(false);\n  const {\n    size,\n    viewport\n  } = useThree();\n  const aspect = size.width / viewport.width;\n  const [position, setPosition] = useState([0, 0, 0]);\n  const sensorColor = \"#575b61\";\n  const sensorColorClicked = \"#582eff\";\n  materials.Beta_Joints_MAT.color = {\n    b: 1,\n    g: 1,\n    r: 1\n  };\n  materials[\"asdf1:Beta_HighLimbsGeoSG2\"].color = {\n    b: 0.5,\n    g: 0.5,\n    r: 0.5\n  };\n  const bind = useDrag(({\n    offset: [x, y]\n  }) => {\n    const [,, z] = position;\n    setPosition([x / aspect, -y / aspect, z]);\n  }, {\n    pointerEvents: true\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", Object.assign({\n    ref: group\n  }, props, {\n    dispose: null,\n    position: [0, -0.9, 0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    scale: [0.01, 0.01, 0.01],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"primitive\", {\n    object: nodes.mixamorigHips,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"mesh\", Object.assign({\n    position: position\n  }, bind(), {\n    //ref={group}\n    onPointerOver: e => console.log(\"hover\"),\n    onPointerOut: e => console.log(\"unhover\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"dodecahedronBufferGeometry\", {\n    args: [5],\n    attach: \"geometry\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"meshLambertMaterial\", {\n    attach: \"material\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [0, 180, 0],\n    onClick: e => setHead(!head),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"sphereBufferGeometry\", {\n    args: [2],\n    attach: \"geometry\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    opacity: 0.3,\n    color: head ? sensorColorClicked : sensorColor,\n    attach: \"material\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [55, 147, -5],\n    onClick: e => setLeftLowerArm(!leftLowerArm),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"sphereBufferGeometry\", {\n    args: [2],\n    attach: \"geometry\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    opacity: 0.3,\n    color: leftLowerArm ? sensorColorClicked : sensorColor,\n    attach: \"material\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"skinnedMesh\", {\n    material: materials.Beta_Joints_MAT,\n    geometry: nodes.Beta_Joints.geometry,\n    skeleton: nodes.Beta_Joints.skeleton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"skinnedMesh\", {\n    material: materials[\"asdf1:Beta_HighLimbsGeoSG2\"],\n    geometry: nodes.Beta_Surface.geometry,\n    skeleton: nodes.Beta_Surface.skeleton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  })));\n}\nuseGLTF.preload(\"../../../Xbot.glb\");","map":{"version":3,"sources":["/Users/ac/Desktop/ui/src/components/Skeleton/Skeleton.js"],"names":["THREE","React","useRef","useState","useEffect","useThree","useDrag","useGLTF","useAnimations","Skeleton","props","group","nodes","materials","animations","actions","head","setHead","leftLowerArm","setLeftLowerArm","size","viewport","aspect","width","position","setPosition","sensorColor","sensorColorClicked","Beta_Joints_MAT","color","b","g","r","bind","offset","x","y","z","pointerEvents","mixamorigHips","e","console","log","Beta_Joints","geometry","skeleton","Beta_Surface","preload"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useThree } from \"react-three-fiber\";\nimport { useDrag } from \"react-use-gesture\";\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\n\nexport default function Skeleton(props) {\n  const group = useRef();\n  const { nodes, materials, animations } = useGLTF(\"../../../Xbot.glb\");\n  const { actions } = useAnimations(animations, group);\n  const [head, setHead] = useState(false);\n  const [leftLowerArm, setLeftLowerArm] = useState(false);\n  const { size, viewport } = useThree();\n  const aspect = size.width / viewport.width;\n  const [position, setPosition] = useState([0, 0, 0]);\n\n  const sensorColor = \"#575b61\";\n  const sensorColorClicked = \"#582eff\";\n\n  materials.Beta_Joints_MAT.color = {\n    b: 1,\n    g: 1,\n    r: 1,\n  };\n\n  materials[\"asdf1:Beta_HighLimbsGeoSG2\"].color = {\n    b: 0.5,\n    g: 0.5,\n    r: 0.5,\n  };\n\n  const bind = useDrag(\n    ({ offset: [x, y] }) => {\n      const [, , z] = position;\n      setPosition([x / aspect, -y / aspect, z]);\n    },\n    { pointerEvents: true }\n  );\n\n  return (\n    <mesh ref={group} {...props} dispose={null} position={[0, -0.9, 0]}>\n      <mesh scale={[0.01, 0.01, 0.01]}>\n        <primitive object={nodes.mixamorigHips} />\n\n        <mesh\n          position={position}\n          {...bind()}\n          //ref={group}\n          onPointerOver={(e) => console.log(\"hover\")}\n          onPointerOut={(e) => console.log(\"unhover\")}\n        >\n          <dodecahedronBufferGeometry args={[5]} attach=\"geometry\" />\n          <meshLambertMaterial attach=\"material\" />\n        </mesh>\n\n        <mesh position={[0, 180, 0]} onClick={(e) => setHead(!head)}>\n          <sphereBufferGeometry args={[2]} attach=\"geometry\" />\n          <meshBasicMaterial\n            opacity={0.3}\n            color={head ? sensorColorClicked : sensorColor}\n            attach=\"material\"\n          />\n        </mesh>\n        <mesh\n          position={[55, 147, -5]}\n          onClick={(e) => setLeftLowerArm(!leftLowerArm)}\n        >\n          <sphereBufferGeometry args={[2]} attach=\"geometry\" />\n          <meshBasicMaterial\n            opacity={0.3}\n            color={leftLowerArm ? sensorColorClicked : sensorColor}\n            attach=\"material\"\n          />\n        </mesh>\n        <skinnedMesh\n          material={materials.Beta_Joints_MAT}\n          geometry={nodes.Beta_Joints.geometry}\n          skeleton={nodes.Beta_Joints.skeleton}\n        />\n        <skinnedMesh\n          material={materials[\"asdf1:Beta_HighLimbsGeoSG2\"]}\n          geometry={nodes.Beta_Surface.geometry}\n          skeleton={nodes.Beta_Surface.skeleton}\n        />\n      </mesh>\n    </mesh>\n  );\n}\n\nuseGLTF.preload(\"../../../Xbot.glb\");\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/ac/Desktop/ui/src/components/Skeleton/Skeleton.js\";\nimport * as THREE from \"three\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useThree } from \"react-three-fiber\";\nimport { useDrag } from \"react-use-gesture\";\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\n\nfunction DraggableDodecahedron() {\n  const colors = [\"hotpink\", \"red\", \"blue\", \"green\", \"yellow\"];\n  const ref = useRef();\n  const [colorIdx, setColorIdx] = useState(0);\n  const [position, setPosition] = useState([0, 0, 0]);\n  const {\n    size,\n    viewport\n  } = useThree();\n  const aspect = size.width / viewport.width;\n  useFrame(() => {\n    ref.current.rotation.z += 0.01;\n    ref.current.rotation.x += 0.01;\n  });\n  const bind = useDrag(({\n    offset: [x, y]\n  }) => {\n    const [,, z] = position;\n    setPosition([x / aspect, -y / aspect, z]);\n  }, {\n    pointerEvents: true\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", Object.assign({\n    position: position\n  }, bind(), {\n    ref: ref,\n    onClick: e => {\n      if (colorIdx === 4) {\n        setColorIdx(0);\n      } else {\n        setColorIdx(colorIdx + 1);\n      }\n    },\n    onPointerOver: e => console.log(\"hover\"),\n    onPointerOut: e => console.log(\"unhover\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"dodecahedronBufferGeometry\", {\n    attach: \"geometry\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshLambertMaterial\", {\n    attach: \"material\",\n    color: colors[colorIdx],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default function Skeleton(props) {\n  const group = useRef();\n  const sensorsRef = useRef();\n  const {\n    nodes,\n    materials,\n    animations\n  } = useGLTF(\"../../../Xbot.glb\");\n  const {\n    actions\n  } = useAnimations(animations, group);\n  const [head, setHead] = useState(false);\n  const [leftLowerArm, setLeftLowerArm] = useState(false);\n  const {\n    size,\n    viewport\n  } = useThree();\n  const aspect = size.width / viewport.width;\n  const [position, setPosition] = useState([0, 0, 0]);\n  const sensorColor = \"#575b61\";\n  const sensorColorClicked = \"#582eff\";\n  materials.Beta_Joints_MAT.color = {\n    b: 1,\n    g: 1,\n    r: 1\n  };\n  materials[\"asdf1:Beta_HighLimbsGeoSG2\"].color = {\n    b: 0.5,\n    g: 0.5,\n    r: 0.5\n  };\n  const bind = useDrag(({\n    offset: [x, y]\n  }) => {\n    const [,, z] = position;\n    setPosition([x / aspect, -y / aspect, z]);\n  }, {\n    pointerEvents: true\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", Object.assign({\n    ref: group\n  }, props, {\n    dispose: null,\n    position: [0, -0.9, 0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    scale: [0.01, 0.01, 0.01],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"primitive\", {\n    object: nodes.mixamorigHips,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [0, 180, 0],\n    onClick: e => setHead(!head),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"sphereBufferGeometry\", {\n    args: [2],\n    attach: \"geometry\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    opacity: 0.3,\n    color: head ? sensorColorClicked : sensorColor,\n    attach: \"material\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [55, 147, -5],\n    onClick: e => setLeftLowerArm(!leftLowerArm),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"sphereBufferGeometry\", {\n    args: [2],\n    attach: \"geometry\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    opacity: 0.3,\n    color: leftLowerArm ? sensorColorClicked : sensorColor,\n    attach: \"material\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"skinnedMesh\", {\n    material: materials.Beta_Joints_MAT,\n    geometry: nodes.Beta_Joints.geometry,\n    skeleton: nodes.Beta_Joints.skeleton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"skinnedMesh\", {\n    material: materials[\"asdf1:Beta_HighLimbsGeoSG2\"],\n    geometry: nodes.Beta_Surface.geometry,\n    skeleton: nodes.Beta_Surface.skeleton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  })));\n}\nuseGLTF.preload(\"../../../Xbot.glb\");","map":{"version":3,"sources":["/Users/ac/Desktop/ui/src/components/Skeleton/Skeleton.js"],"names":["THREE","React","useRef","useState","useEffect","useThree","useDrag","useGLTF","useAnimations","DraggableDodecahedron","colors","ref","colorIdx","setColorIdx","position","setPosition","size","viewport","aspect","width","useFrame","current","rotation","z","x","bind","offset","y","pointerEvents","e","console","log","Skeleton","props","group","sensorsRef","nodes","materials","animations","actions","head","setHead","leftLowerArm","setLeftLowerArm","sensorColor","sensorColorClicked","Beta_Joints_MAT","color","b","g","r","mixamorigHips","Beta_Joints","geometry","skeleton","Beta_Surface","preload"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useThree } from \"react-three-fiber\";\nimport { useDrag } from \"react-use-gesture\";\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\n\nfunction DraggableDodecahedron() {\n  const colors = [\"hotpink\", \"red\", \"blue\", \"green\", \"yellow\"];\n  const ref = useRef();\n  const [colorIdx, setColorIdx] = useState(0);\n  const [position, setPosition] = useState([0, 0, 0]);\n  const { size, viewport } = useThree();\n  const aspect = size.width / viewport.width;\n  useFrame(() => {\n    ref.current.rotation.z += 0.01;\n    ref.current.rotation.x += 0.01;\n  });\n  const bind = useDrag(\n    ({ offset: [x, y] }) => {\n      const [, , z] = position;\n      setPosition([x / aspect, -y / aspect, z]);\n    },\n    { pointerEvents: true }\n  );\n\n  return (\n    <mesh\n      position={position}\n      {...bind()}\n      ref={ref}\n      onClick={(e) => {\n        if (colorIdx === 4) {\n          setColorIdx(0);\n        } else {\n          setColorIdx(colorIdx + 1);\n        }\n      }}\n      onPointerOver={(e) => console.log(\"hover\")}\n      onPointerOut={(e) => console.log(\"unhover\")}\n    >\n      <dodecahedronBufferGeometry attach=\"geometry\" />\n      <meshLambertMaterial attach=\"material\" color={colors[colorIdx]} />\n    </mesh>\n  );\n}\n\nexport default function Skeleton(props) {\n  const group = useRef();\n  const sensorsRef = useRef();\n  const { nodes, materials, animations } = useGLTF(\"../../../Xbot.glb\");\n  const { actions } = useAnimations(animations, group);\n  const [head, setHead] = useState(false);\n  const [leftLowerArm, setLeftLowerArm] = useState(false);\n  const { size, viewport } = useThree();\n  const aspect = size.width / viewport.width;\n  const [position, setPosition] = useState([0, 0, 0]);\n\n  const sensorColor = \"#575b61\";\n  const sensorColorClicked = \"#582eff\";\n\n  materials.Beta_Joints_MAT.color = {\n    b: 1,\n    g: 1,\n    r: 1,\n  };\n\n  materials[\"asdf1:Beta_HighLimbsGeoSG2\"].color = {\n    b: 0.5,\n    g: 0.5,\n    r: 0.5,\n  };\n\n  const bind = useDrag(\n    ({ offset: [x, y] }) => {\n      const [, , z] = position;\n      setPosition([x / aspect, -y / aspect, z]);\n    },\n    { pointerEvents: true }\n  );\n\n  return (\n    <mesh ref={group} {...props} dispose={null} position={[0, -0.9, 0]}>\n      <mesh scale={[0.01, 0.01, 0.01]}>\n        <primitive object={nodes.mixamorigHips} />\n        <mesh position={[0, 180, 0]} onClick={(e) => setHead(!head)}>\n          <sphereBufferGeometry args={[2]} attach=\"geometry\" />\n          <meshBasicMaterial\n            opacity={0.3}\n            color={head ? sensorColorClicked : sensorColor}\n            attach=\"material\"\n          />\n        </mesh>\n        <mesh\n          position={[55, 147, -5]}\n          onClick={(e) => setLeftLowerArm(!leftLowerArm)}\n        >\n          <sphereBufferGeometry args={[2]} attach=\"geometry\" />\n          <meshBasicMaterial\n            opacity={0.3}\n            color={leftLowerArm ? sensorColorClicked : sensorColor}\n            attach=\"material\"\n          />\n        </mesh>\n        <skinnedMesh\n          material={materials.Beta_Joints_MAT}\n          geometry={nodes.Beta_Joints.geometry}\n          skeleton={nodes.Beta_Joints.skeleton}\n        />\n        <skinnedMesh\n          material={materials[\"asdf1:Beta_HighLimbsGeoSG2\"]}\n          geometry={nodes.Beta_Surface.geometry}\n          skeleton={nodes.Beta_Surface.skeleton}\n        />\n      </mesh>\n    </mesh>\n  );\n}\n\nuseGLTF.preload(\"../../../Xbot.glb\");\n"]},"metadata":{},"sourceType":"module"}
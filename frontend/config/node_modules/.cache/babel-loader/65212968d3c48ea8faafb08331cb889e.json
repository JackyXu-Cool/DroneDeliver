{"ast":null,"code":"var _jsxFileName = \"/Users/ac/Desktop/ui/src/components/Skeleton/Skeleton.js\";\nimport * as THREE from \"three\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useThree } from \"react-three-fiber\";\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\nexport default function Skeleton(props) {\n  const group = useRef();\n  const {\n    nodes,\n    materials,\n    animations\n  } = useGLTF(\"../../../Xbot.glb\");\n  const {\n    actions\n  } = useAnimations(animations, group);\n  const [head, setHead] = useState(false);\n  const [leftLowerArm, setLeftLowerArm] = useState(false);\n  const {\n    size,\n    viewport\n  } = useThree();\n  const aspect = size.width / viewport.width;\n  const sensorColor = \"#575b61\";\n  const sensorColorClicked = \"#582eff\";\n  materials.Beta_Joints_MAT.color = {\n    b: 1,\n    g: 1,\n    r: 1\n  };\n  materials[\"asdf1:Beta_HighLimbsGeoSG2\"].color = {\n    b: 0.5,\n    g: 0.5,\n    r: 0.5\n  };\n  const bind = useDrag(({\n    offset: [x, y]\n  }) => {\n    const [,, z] = position;\n    setPosition([x / aspect, -y / aspect, z]);\n  }, {\n    pointerEvents: true\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", Object.assign({\n    ref: group\n  }, props, {\n    dispose: null,\n    position: [0, -0.9, 0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    scale: [0.01, 0.01, 0.01],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"primitive\", {\n    object: nodes.mixamorigHips,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [0, 180, 0],\n    onClick: e => setHead(!head),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"sphereBufferGeometry\", {\n    args: [2],\n    attach: \"geometry\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    opacity: 0.3,\n    color: head ? sensorColorClicked : sensorColor,\n    attach: \"material\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [55, 147, -5],\n    onClick: e => setLeftLowerArm(!leftLowerArm),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"sphereBufferGeometry\", {\n    args: [2],\n    attach: \"geometry\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    opacity: 0.3,\n    color: leftLowerArm ? sensorColorClicked : sensorColor,\n    attach: \"material\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"skinnedMesh\", {\n    material: materials.Beta_Joints_MAT,\n    geometry: nodes.Beta_Joints.geometry,\n    skeleton: nodes.Beta_Joints.skeleton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"skinnedMesh\", {\n    material: materials[\"asdf1:Beta_HighLimbsGeoSG2\"],\n    geometry: nodes.Beta_Surface.geometry,\n    skeleton: nodes.Beta_Surface.skeleton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  })));\n}\nuseGLTF.preload(\"../../../Xbot.glb\");","map":{"version":3,"sources":["/Users/ac/Desktop/ui/src/components/Skeleton/Skeleton.js"],"names":["THREE","React","useRef","useState","useEffect","useThree","useGLTF","useAnimations","Skeleton","props","group","nodes","materials","animations","actions","head","setHead","leftLowerArm","setLeftLowerArm","size","viewport","aspect","width","sensorColor","sensorColorClicked","Beta_Joints_MAT","color","b","g","r","bind","useDrag","offset","x","y","z","position","setPosition","pointerEvents","mixamorigHips","e","Beta_Joints","geometry","skeleton","Beta_Surface","preload"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,mBAAvC;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACtC,QAAMC,KAAK,GAAGR,MAAM,EAApB;AACA,QAAM;AAAES,IAAAA,KAAF;AAASC,IAAAA,SAAT;AAAoBC,IAAAA;AAApB,MAAmCP,OAAO,CAAC,mBAAD,CAAhD;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAcP,aAAa,CAACM,UAAD,EAAaH,KAAb,CAAjC;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAEgB,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAqBf,QAAQ,EAAnC;AACA,QAAMgB,MAAM,GAAGF,IAAI,CAACG,KAAL,GAAaF,QAAQ,CAACE,KAArC;AAEA,QAAMC,WAAW,GAAG,SAApB;AACA,QAAMC,kBAAkB,GAAG,SAA3B;AAEAZ,EAAAA,SAAS,CAACa,eAAV,CAA0BC,KAA1B,GAAkC;AAChCC,IAAAA,CAAC,EAAE,CAD6B;AAEhCC,IAAAA,CAAC,EAAE,CAF6B;AAGhCC,IAAAA,CAAC,EAAE;AAH6B,GAAlC;AAMAjB,EAAAA,SAAS,CAAC,4BAAD,CAAT,CAAwCc,KAAxC,GAAgD;AAC9CC,IAAAA,CAAC,EAAE,GAD2C;AAE9CC,IAAAA,CAAC,EAAE,GAF2C;AAG9CC,IAAAA,CAAC,EAAE;AAH2C,GAAhD;AAMA,QAAMC,IAAI,GAAGC,OAAO,CAClB,CAAC;AAAEC,IAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ;AAAV,GAAD,KAAwB;AACtB,UAAM,IAAKC,CAAL,IAAUC,QAAhB;AACAC,IAAAA,WAAW,CAAC,CAACJ,CAAC,GAAGZ,MAAL,EAAa,CAACa,CAAD,GAAKb,MAAlB,EAA0Bc,CAA1B,CAAD,CAAX;AACD,GAJiB,EAKlB;AAAEG,IAAAA,aAAa,EAAE;AAAjB,GALkB,CAApB;AAQA,sBACE;AAAM,IAAA,GAAG,EAAE5B;AAAX,KAAsBD,KAAtB;AAA6B,IAAA,OAAO,EAAE,IAAtC;AAA4C,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAC,GAAL,EAAU,CAAV,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE;AAAM,IAAA,KAAK,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAW,IAAA,MAAM,EAAEE,KAAK,CAAC4B,aAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE;AAAM,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,CAAhB;AAA6B,IAAA,OAAO,EAAGC,CAAD,IAAOxB,OAAO,CAAC,CAACD,IAAF,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAsB,IAAA,IAAI,EAAE,CAAC,CAAD,CAA5B;AAAiC,IAAA,MAAM,EAAC,UAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AACE,IAAA,OAAO,EAAE,GADX;AAEE,IAAA,KAAK,EAAEA,IAAI,GAAGS,kBAAH,GAAwBD,WAFrC;AAGE,IAAA,MAAM,EAAC,UAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAHF,eAWE;AACE,IAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,GAAL,EAAU,CAAC,CAAX,CADZ;AAEE,IAAA,OAAO,EAAGiB,CAAD,IAAOtB,eAAe,CAAC,CAACD,YAAF,CAFjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE;AAAsB,IAAA,IAAI,EAAE,CAAC,CAAD,CAA5B;AAAiC,IAAA,MAAM,EAAC,UAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,eAKE;AACE,IAAA,OAAO,EAAE,GADX;AAEE,IAAA,KAAK,EAAEA,YAAY,GAAGO,kBAAH,GAAwBD,WAF7C;AAGE,IAAA,MAAM,EAAC,UAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CAXF,eAsBE;AACE,IAAA,QAAQ,EAAEX,SAAS,CAACa,eADtB;AAEE,IAAA,QAAQ,EAAEd,KAAK,CAAC8B,WAAN,CAAkBC,QAF9B;AAGE,IAAA,QAAQ,EAAE/B,KAAK,CAAC8B,WAAN,CAAkBE,QAH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBF,eA2BE;AACE,IAAA,QAAQ,EAAE/B,SAAS,CAAC,4BAAD,CADrB;AAEE,IAAA,QAAQ,EAAED,KAAK,CAACiC,YAAN,CAAmBF,QAF/B;AAGE,IAAA,QAAQ,EAAE/B,KAAK,CAACiC,YAAN,CAAmBD,QAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3BF,CADF,CADF;AAqCD;AAEDrC,OAAO,CAACuC,OAAR,CAAgB,mBAAhB","sourcesContent":["import * as THREE from \"three\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useThree } from \"react-three-fiber\";\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\n\nexport default function Skeleton(props) {\n  const group = useRef();\n  const { nodes, materials, animations } = useGLTF(\"../../../Xbot.glb\");\n  const { actions } = useAnimations(animations, group);\n  const [head, setHead] = useState(false);\n  const [leftLowerArm, setLeftLowerArm] = useState(false);\n  const { size, viewport } = useThree();\n  const aspect = size.width / viewport.width;\n\n  const sensorColor = \"#575b61\";\n  const sensorColorClicked = \"#582eff\";\n\n  materials.Beta_Joints_MAT.color = {\n    b: 1,\n    g: 1,\n    r: 1,\n  };\n\n  materials[\"asdf1:Beta_HighLimbsGeoSG2\"].color = {\n    b: 0.5,\n    g: 0.5,\n    r: 0.5,\n  };\n\n  const bind = useDrag(\n    ({ offset: [x, y] }) => {\n      const [, , z] = position;\n      setPosition([x / aspect, -y / aspect, z]);\n    },\n    { pointerEvents: true }\n  );\n\n  return (\n    <mesh ref={group} {...props} dispose={null} position={[0, -0.9, 0]}>\n      <mesh scale={[0.01, 0.01, 0.01]}>\n        <primitive object={nodes.mixamorigHips} />\n\n        <mesh position={[0, 180, 0]} onClick={(e) => setHead(!head)}>\n          <sphereBufferGeometry args={[2]} attach=\"geometry\" />\n          <meshBasicMaterial\n            opacity={0.3}\n            color={head ? sensorColorClicked : sensorColor}\n            attach=\"material\"\n          />\n        </mesh>\n        <mesh\n          position={[55, 147, -5]}\n          onClick={(e) => setLeftLowerArm(!leftLowerArm)}\n        >\n          <sphereBufferGeometry args={[2]} attach=\"geometry\" />\n          <meshBasicMaterial\n            opacity={0.3}\n            color={leftLowerArm ? sensorColorClicked : sensorColor}\n            attach=\"material\"\n          />\n        </mesh>\n        <skinnedMesh\n          material={materials.Beta_Joints_MAT}\n          geometry={nodes.Beta_Joints.geometry}\n          skeleton={nodes.Beta_Joints.skeleton}\n        />\n        <skinnedMesh\n          material={materials[\"asdf1:Beta_HighLimbsGeoSG2\"]}\n          geometry={nodes.Beta_Surface.geometry}\n          skeleton={nodes.Beta_Surface.skeleton}\n        />\n      </mesh>\n    </mesh>\n  );\n}\n\nuseGLTF.preload(\"../../../Xbot.glb\");\n"]},"metadata":{},"sourceType":"module"}
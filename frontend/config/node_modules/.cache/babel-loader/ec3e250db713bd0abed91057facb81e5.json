{"ast":null,"code":"var _jsxFileName = \"/Users/ac/Desktop/ui/src/components/Skeleton/Skeleton.js\";\nimport * as THREE from \"three\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useThree, useFrame } from \"react-three-fiber\";\nimport { useDrag } from \"react-use-gesture\";\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\nexport default function Skeleton() {\n  const colors = [\"hotpink\", \"red\", \"blue\", \"green\", \"yellow\"];\n  const ref = useRef();\n  const [colorIdx, setColorIdx] = useState(0);\n  const [position, setPosition] = useState([0, 0, 0]);\n  const {\n    size,\n    viewport\n  } = useThree();\n  const aspect = size.width / viewport.width;\n  const bind = useDrag(({\n    offset: [x, y, z]\n  }) => {\n    const [,,,] = position;\n    setPosition([x / aspect, -y / aspect, z / aspect]);\n  }, {\n    pointerEvents: true\n  });\n  console.log(position);\n  return /*#__PURE__*/React.createElement(\"mesh\", Object.assign({\n    position: position\n  }, bind(), {\n    ref: ref,\n    onClick: e => {\n      if (colorIdx === 4) {\n        setColorIdx(0);\n      } else {\n        setColorIdx(colorIdx + 1);\n      }\n    },\n    onPointerOver: e => console.log(\"hover\"),\n    onPointerOut: e => console.log(\"unhover\"),\n    scale: [0.5, 0.5, 0.5],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"dodecahedronBufferGeometry\", {\n    attach: \"geometry\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshLambertMaterial\", {\n    attach: \"material\",\n    color: colors[colorIdx],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }));\n} // export default function Skeleton(props) {\n//   const group = useRef();\n//   const sensorsRef = useRef();\n//   const { nodes, materials, animations } = useGLTF(\"../../../Xbot.glb\");\n//   const { actions } = useAnimations(animations, group);\n//   const [head, setHead] = useState(false);\n//   const [leftLowerArm, setLeftLowerArm] = useState(false);\n//   const { size, viewport } = useThree();\n//   const aspect = size.width / viewport.width;\n//   const [position, setPosition] = useState([0, 0, 0]);\n//   const sensorColor = \"#575b61\";\n//   const sensorColorClicked = \"#582eff\";\n//   materials.Beta_Joints_MAT.color = {\n//     b: 1,\n//     g: 1,\n//     r: 1,\n//   };\n//   materials[\"asdf1:Beta_HighLimbsGeoSG2\"].color = {\n//     b: 0.5,\n//     g: 0.5,\n//     r: 0.5,\n//   };\n//   const bind = useDrag(\n//     ({ offset: [x, y] }) => {\n//       const [, , z] = position;\n//       setPosition([x / aspect, -y / aspect, z]);\n//     },\n//     { pointerEvents: true }\n//   );\n//   return (\n//     <mesh ref={group} {...props} dispose={null} position={[0, -0.9, 0]}>\n//       <mesh scale={[0.01, 0.01, 0.01]}>\n//         <primitive object={nodes.mixamorigHips} />\n//         <mesh position={[0, 180, 0]} onClick={(e) => setHead(!head)}>\n//           <sphereBufferGeometry args={[2]} attach=\"geometry\" />\n//           <meshBasicMaterial\n//             opacity={0.3}\n//             color={head ? sensorColorClicked : sensorColor}\n//             attach=\"material\"\n//           />\n//         </mesh>\n//         <mesh\n//           position={[55, 147, -5]}\n//           onClick={(e) => setLeftLowerArm(!leftLowerArm)}\n//         >\n//           <sphereBufferGeometry args={[2]} attach=\"geometry\" />\n//           <meshBasicMaterial\n//             opacity={0.3}\n//             color={leftLowerArm ? sensorColorClicked : sensorColor}\n//             attach=\"material\"\n//           />\n//         </mesh>\n//         <skinnedMesh\n//           material={materials.Beta_Joints_MAT}\n//           geometry={nodes.Beta_Joints.geometry}\n//           skeleton={nodes.Beta_Joints.skeleton}\n//         />\n//         <skinnedMesh\n//           material={materials[\"asdf1:Beta_HighLimbsGeoSG2\"]}\n//           geometry={nodes.Beta_Surface.geometry}\n//           skeleton={nodes.Beta_Surface.skeleton}\n//         />\n//       </mesh>\n//     </mesh>\n//   );\n// }\n// useGLTF.preload(\"../../../Xbot.glb\");","map":{"version":3,"sources":["/Users/ac/Desktop/ui/src/components/Skeleton/Skeleton.js"],"names":["THREE","React","useRef","useState","useEffect","useThree","useFrame","useDrag","useGLTF","useAnimations","Skeleton","colors","ref","colorIdx","setColorIdx","position","setPosition","size","viewport","aspect","width","bind","offset","x","y","z","pointerEvents","console","log","e"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,mBAAnC;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,mBAAvC;AAEA,eAAe,SAASC,QAAT,GAAoB;AACjC,QAAMC,MAAM,GAAG,CAAC,SAAD,EAAY,KAAZ,EAAmB,MAAnB,EAA2B,OAA3B,EAAoC,QAApC,CAAf;AACA,QAAMC,GAAG,GAAGV,MAAM,EAAlB;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,CAAxC;AACA,QAAM;AAAEc,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAqBb,QAAQ,EAAnC;AACA,QAAMc,MAAM,GAAGF,IAAI,CAACG,KAAL,GAAaF,QAAQ,CAACE,KAArC;AAEA,QAAMC,IAAI,GAAGd,OAAO,CAClB,CAAC;AAAEe,IAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP;AAAV,GAAD,KAA2B;AACzB,UAAM,QAAUV,QAAhB;AACAC,IAAAA,WAAW,CAAC,CAACO,CAAC,GAAGJ,MAAL,EAAa,CAACK,CAAD,GAAKL,MAAlB,EAA0BM,CAAC,GAAGN,MAA9B,CAAD,CAAX;AACD,GAJiB,EAKlB;AAAEO,IAAAA,aAAa,EAAE;AAAjB,GALkB,CAApB;AAQAC,EAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ;AAEA,sBACE;AACE,IAAA,QAAQ,EAAEA;AADZ,KAEMM,IAAI,EAFV;AAGE,IAAA,GAAG,EAAET,GAHP;AAIE,IAAA,OAAO,EAAGiB,CAAD,IAAO;AACd,UAAIhB,QAAQ,KAAK,CAAjB,EAAoB;AAClBC,QAAAA,WAAW,CAAC,CAAD,CAAX;AACD,OAFD,MAEO;AACLA,QAAAA,WAAW,CAACD,QAAQ,GAAG,CAAZ,CAAX;AACD;AACF,KAVH;AAWE,IAAA,aAAa,EAAGgB,CAAD,IAAOF,OAAO,CAACC,GAAR,CAAY,OAAZ,CAXxB;AAYE,IAAA,YAAY,EAAGC,CAAD,IAAOF,OAAO,CAACC,GAAR,CAAY,SAAZ,CAZvB;AAaE,IAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAbT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAeE;AAA4B,IAAA,MAAM,EAAC,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,eAgBE;AAAqB,IAAA,MAAM,EAAC,UAA5B;AAAuC,IAAA,KAAK,EAAEjB,MAAM,CAACE,QAAD,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,CADF;AAoBD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import * as THREE from \"three\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useThree, useFrame } from \"react-three-fiber\";\nimport { useDrag } from \"react-use-gesture\";\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\n\nexport default function Skeleton() {\n  const colors = [\"hotpink\", \"red\", \"blue\", \"green\", \"yellow\"];\n  const ref = useRef();\n  const [colorIdx, setColorIdx] = useState(0);\n  const [position, setPosition] = useState([0, 0, 0]);\n  const { size, viewport } = useThree();\n  const aspect = size.width / viewport.width;\n\n  const bind = useDrag(\n    ({ offset: [x, y, z] }) => {\n      const [, , ,] = position;\n      setPosition([x / aspect, -y / aspect, z / aspect]);\n    },\n    { pointerEvents: true }\n  );\n\n  console.log(position);\n\n  return (\n    <mesh\n      position={position}\n      {...bind()}\n      ref={ref}\n      onClick={(e) => {\n        if (colorIdx === 4) {\n          setColorIdx(0);\n        } else {\n          setColorIdx(colorIdx + 1);\n        }\n      }}\n      onPointerOver={(e) => console.log(\"hover\")}\n      onPointerOut={(e) => console.log(\"unhover\")}\n      scale={[0.5, 0.5, 0.5]}\n    >\n      <dodecahedronBufferGeometry attach=\"geometry\" />\n      <meshLambertMaterial attach=\"material\" color={colors[colorIdx]} />\n    </mesh>\n  );\n}\n\n// export default function Skeleton(props) {\n//   const group = useRef();\n//   const sensorsRef = useRef();\n//   const { nodes, materials, animations } = useGLTF(\"../../../Xbot.glb\");\n//   const { actions } = useAnimations(animations, group);\n//   const [head, setHead] = useState(false);\n//   const [leftLowerArm, setLeftLowerArm] = useState(false);\n//   const { size, viewport } = useThree();\n//   const aspect = size.width / viewport.width;\n//   const [position, setPosition] = useState([0, 0, 0]);\n\n//   const sensorColor = \"#575b61\";\n//   const sensorColorClicked = \"#582eff\";\n\n//   materials.Beta_Joints_MAT.color = {\n//     b: 1,\n//     g: 1,\n//     r: 1,\n//   };\n\n//   materials[\"asdf1:Beta_HighLimbsGeoSG2\"].color = {\n//     b: 0.5,\n//     g: 0.5,\n//     r: 0.5,\n//   };\n\n//   const bind = useDrag(\n//     ({ offset: [x, y] }) => {\n//       const [, , z] = position;\n//       setPosition([x / aspect, -y / aspect, z]);\n//     },\n//     { pointerEvents: true }\n//   );\n\n//   return (\n//     <mesh ref={group} {...props} dispose={null} position={[0, -0.9, 0]}>\n//       <mesh scale={[0.01, 0.01, 0.01]}>\n//         <primitive object={nodes.mixamorigHips} />\n//         <mesh position={[0, 180, 0]} onClick={(e) => setHead(!head)}>\n//           <sphereBufferGeometry args={[2]} attach=\"geometry\" />\n//           <meshBasicMaterial\n//             opacity={0.3}\n//             color={head ? sensorColorClicked : sensorColor}\n//             attach=\"material\"\n//           />\n//         </mesh>\n//         <mesh\n//           position={[55, 147, -5]}\n//           onClick={(e) => setLeftLowerArm(!leftLowerArm)}\n//         >\n//           <sphereBufferGeometry args={[2]} attach=\"geometry\" />\n//           <meshBasicMaterial\n//             opacity={0.3}\n//             color={leftLowerArm ? sensorColorClicked : sensorColor}\n//             attach=\"material\"\n//           />\n//         </mesh>\n//         <skinnedMesh\n//           material={materials.Beta_Joints_MAT}\n//           geometry={nodes.Beta_Joints.geometry}\n//           skeleton={nodes.Beta_Joints.skeleton}\n//         />\n//         <skinnedMesh\n//           material={materials[\"asdf1:Beta_HighLimbsGeoSG2\"]}\n//           geometry={nodes.Beta_Surface.geometry}\n//           skeleton={nodes.Beta_Surface.skeleton}\n//         />\n//       </mesh>\n//     </mesh>\n//   );\n// }\n\n// useGLTF.preload(\"../../../Xbot.glb\");\n"]},"metadata":{},"sourceType":"module"}